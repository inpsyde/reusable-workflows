name: Run Playwright tests using DDEV

on:
  workflow_call:
    inputs:
      PHP_VERSION:
        description: PHP version which will override the version set in the DDEV config.
        required: false
        type: string
      NODE_VERSION:
        description: Node.js version which will override the version set in the DDEV config.
        required: false
        type: string
      DDEV_ORCHESTRATE_CMD:
        description: The command for setting up the DDEV website, such as 'ddev orchestrate' from inpsyde/ddev-wordpress-plugin-template.
        required: false
        type: string
      PLAYWRIGHT_INSTALL_CMD:
        description: The command for installing Playwright and its deps, such as `yarn install && yarn playwright install --with-deps` or 'ddev pw-install-host' from inpsyde/ddev-wordpress-plugin-template.
        required: true
        type: string
      PLAYWRIGHT_RUN_CMD:
        description: The command for running Playwright tests, such as `yarn playwright test` or 'ddev pw-host test' from inpsyde/ddev-wordpress-plugin-template.
        required: true
        type: string
      PLAYWRIGHT_DIR:
        description: The path to the Playwright project.
        required: false
        default: 'tests/Playwright'
        type: string
      NGROK_START_CMD:
        default: 'vendor/bin/ddev-share'
        description: The command for starting Ngrok, such as ddev-share from inpsyde/ddev-tools.
        required: false
        type: string
      BASEURL_ENV_NAME:
        default: 'BASEURL'
        description: The name of the env variable with the base URL for Playwright. Used for overwriting it with the URL from Ngrok.
        required: false
        type: string
    secrets:
      COMPOSER_AUTH_JSON:
        description: Authentication for privately hosted packages and repositories as a JSON formatted object.
        required: false
      NPM_REGISTRY_TOKEN:
        description: Authentication for the private npm registry.
        required: false
      ENV_VARS:
        description: Additional environment variables as a JSON formatted object.
        required: false
      DDEV_ENV_VARS:
        description: Additional environment variables for DDEV as a JSON formatted object.
        required: false
      NGROK_AUTH_TOKEN:
        description: The auth token for Ngrok. If not provided, skips Ngrok.
        required: false

jobs:
  ddev-playwright:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    env:
      COMPOSER_AUTH: '${{ secrets.COMPOSER_AUTH_JSON }}'
      NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}
      NGROK: ${{ secrets.NGROK_AUTH_TOKEN != '' }}
    outputs:
      artifact: ${{ steps.set-artifact-name.outputs.artifact }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up custom environment variables
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
        if: env.ENV_VARS
        uses: actions/github-script@v6
        with:
          script: |
            JSON
              .parse(process.env.ENV_VARS)
              .forEach(envVar => core.exportVariable(envVar.name, envVar.value));

      - uses: ddev/github-action-setup-ddev@v1
        with:
          autostart: false
      
      - name: Add CI env var inside DDEV
        run: ddev config --web-environment-add="CI=true"

      - name: Set up DDEV environment variables
        env:
          ENV_VARS: ${{ secrets.DDEV_ENV_VARS }}
        if: env.ENV_VARS
        uses: actions/github-script@v6
        with:
          script: |
            JSON
              .parse(process.env.ENV_VARS)
              .forEach(envVar => {
                core.setSecret(envVar.name);
                core.setSecret(envVar.value);
                exec.exec('ddev config --web-environment-add="' + envVar.name + '=' + envVar.value + '"');
              });

      - name: Add COMPOSER_AUTH into DDEV
        env:
          COMPOSER_AUTH_JSON: '${{ secrets.COMPOSER_AUTH_JSON }}'
        run: echo '${{ env.COMPOSER_AUTH_JSON }}' > $GITHUB_WORKSPACE/auth.json
        if: env.COMPOSER_AUTH_JSON
      - name: Add NODE_AUTH_TOKEN into DDEV
        env:
          NPM_REGISTRY_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}
        run: |
            ddev config --web-environment-add="NODE_AUTH_TOKEN=${{ env.NPM_REGISTRY_TOKEN }}"; exit 0
            ddev exec npm config set @inpsyde:registry 'https://npm.pkg.github.com'; exit 0
            ddev exec npm config set //npm.pkg.github.com/:_authToken ${{ secrets.NPM_REGISTRY_TOKEN }}; exit 0
        if: env.NPM_REGISTRY_TOKEN

      - name: Configure DDEV PHP version
        run: ddev config --php-version ${{ inputs.PHP_VERSION }}
        if: inputs.PHP_VERSION
      - name: Configure DDEV Node.js version
        run: ddev config --nodejs-version ${{ inputs.NODE_VERSION }}
        if: inputs.NODE_VERSION

      - name: Start DDEV
        run: ddev start

      - name: Orchestrate DDEV
        run: ${{ inputs.DDEV_ORCHESTRATE_CMD }}
        if: inputs.DDEV_ORCHESTRATE_CMD

      - name: Install Ngrok
        run: curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok
        if: env.NGROK != 'false'

      - name: Add Ngrok auth token
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: ngrok config add-authtoken ${{ env.NGROK_AUTH_TOKEN }}
        if: env.NGROK != 'false'

      - name: Install Playwright
        run: ${{ inputs.PLAYWRIGHT_INSTALL_CMD }}

      - name: Start Ngrok
        run: ${{ inputs.NGROK_START_CMD }}
        if: env.NGROK != 'false'

      - name: Get Ngrok URL and save in env
        run: echo "${{ inputs.BASEURL_ENV_NAME }}=https://$( curl http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url' | awk -F'^http[s]?://' '{print $2}' )" >> $GITHUB_ENV
        if: env.NGROK != 'false'


      - name: Run Playwright
        run: ${{ inputs.PLAYWRIGHT_RUN_CMD }}

      - name: Set artifact name
        id: set-artifact-name
        run: echo "artifact=playwright-report" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
            name: ${{ steps.set-artifact-name.outputs.artifact }}
            path: |
                ${{ inputs.PLAYWRIGHT_DIR }}/playwright-report/*
                ${{ inputs.PLAYWRIGHT_DIR }}/test-results/*
