name: Build and push

on:
  workflow_call:
    inputs:
      NODE_OPTIONS:
        description: Space-separated list of command-line Node options.
        type: string
        default: ''
        required: false
      NODE_VERSION:
        description: Node version with which the static code analysis is to be executed.
        default: 18
        required: false
        type: string
      NPM_REGISTRY_DOMAIN:
        description: Domain of the private npm registry.
        default: https://npm.pkg.github.com/
        required: false
        type: string
      PHP_VERSION:
        description: PHP version with which the PHP tools are to be executed.
        default: '8.2'
        required: false
        type: string
      PHP_TOOLS:
        description: PHP tools supported by shivammathur/setup-php to be installed.
        default: ''
        required: false
        type: string
      COMPOSER_ARGS:
        description: Set of arguments passed to Composer when gathering production dependencies.
        default: '--no-dev --prefer-dist --optimize-autoloader'
        required: false
        type: string
      PHP_VERSION_BUILD:
        description: PHP version to use when executing build tools.
        default: '8.2'
        required: false
        type: string
      PACKAGE_FOLDER_NAME:
        description: The name of the package folder (falls back to the repository name).
        required: false
        default: ''
        type: string
      PACKAGE_VERSION:
        description: The new package version.
        required: true
        type: string
      PRE_SCRIPT:
        description: Run custom shell code before creating the release archive.
        default: ''
        required: false
        type: string

    secrets:
      NPM_REGISTRY_TOKEN:
        description: Authentication for the private npm registry.
        required: false
      GITHUB_USER_EMAIL:
        description: Email address for the GitHub user configuration.
        required: true
      GITHUB_USER_NAME:
        description: Username for the GitHub user configuration.
        required: true
      GITHUB_USER_SSH_KEY:
        description: Private SSH key associated with the GitHub user passed as `GITHUB_USER_NAME`.
        required: true
      GITHUB_USER_SSH_PUBLIC_KEY:
        description: Public SSH key associated with the GitHub user passed as `GITHUB_USER_NAME`.
        required: true
      ENV_VARS:
        description: Additional environment variables as a JSON formatted object.
        required: false

jobs:
  build-push:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      NO_CHANGES: ''                                   # we'll override if no changes to commit
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.GITHUB_USER_SSH_KEY }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GITHUB_USER_SSH_KEY }}

      - name: Set up Git
        run: |
          git config --global user.email "${{ secrets.GITHUB_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GITHUB_USER_NAME }}"
          git config --global advice.addIgnoredFile false
          git config --global push.autoSetupRemote true

      - name: Set up signing commits
        run: |
          git config --global commit.gpgsign true
          git config --global gpg.format ssh
          git config --global user.signingkey ${{ secrets.GITHUB_USER_SSH_PUBLIC_KEY }}

      - name: Set up custom environment variables
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
        if: ${{ env.ENV_VARS }}
        uses: actions/github-script@v7
        with:
          script: |
            JSON
              .parse(process.env.ENV_VARS)
              .forEach(envVar => core.exportVariable(envVar.name, envVar.value));

        ### Hardcode to `dev/*` (not `dev-*`)!
      - name: Set branch environment variables
        run: |
          echo "BUILT_BRANCH_NAME=${{ inputs.BUILT_BRANCH_NAME && inputs.BUILT_BRANCH_NAME || github.ref_name }}" >> $GITHUB_ENV

      - name: Checkout the build branch and merge in it
        run: |
          git show-ref -q refs/remotes/origin/${{ env.BUILT_BRANCH_NAME }} && git checkout ${{ env.BUILT_BRANCH_NAME }} || git checkout -b ${{ env.BUILT_BRANCH_NAME }}
          git merge ${{ github.ref_name }}

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.PHP_VERSION }}
          tools: php-scoper, sniccowp/php-scoper-wordpress-excludes, composer/installers, inpsyde/wp-translation-downloader, ${{ inputs.PHP_TOOLS }}
          coverage: none

      - name: Set up node
        uses: actions/setup-node@v4
        env:
          NODE_OPTIONS: ${{ inputs.NODE_OPTIONS }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}
        with:
          node-version: ${{ inputs.NODE_VERSION }}
          registry-url: ${{ inputs.NPM_REGISTRY_DOMAIN }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Add commit hash to plugin header
        run: |
          sed -Ei "s/SHA: .*/SHA: ${GIT_SHA}/g" $(grep -r --include "*.php" "Plugin Name:" .)

      - name: Compile assets
        run: npm run build

      - name: Run WordPress Translation Downloader
        run: composer wp-translation-downloader:download

      - name: Run PHP-Scoper
        if: ${{ hashFiles('scoper.inc.php') != '' }}
        # The sed call appends the Git commit SHA to the Composer autoload cache key to ensure unique identification for prefixed files.
        # This prevents Composer from skipping autoloaded files due to hash collisions based on relative paths.
        run: |
          php-scoper add-prefix --force --output-dir=build
          composer --working-dir=build dump-autoload -o
          sed -i "s/'__composer_autoload_files'/\'__composer_autoload_files_${{ github.sha }}'/g" "build/vendor/composer/autoload_real.php"     

      - name: Move build to working directory
        if: ${{ hashFiles('scoper.inc.php') != '' }}
        run: |
        #  rsync -av --delete ./build/ . && rm -rf ./build/
        # New Attempt:
        # git config core.excludesFile .distignore #tell git to (gracefully) use distignore file during cleanup
        # git clean -Xdf # clean up all files possibly mentioned in .distignore (e.g., source files)
        #


      - name: Git add, commit, and push
        run: |
          declare -a TARGET_DIRECTORY_PATHS_ARRAY=(${{ inputs.ASSETS_TARGET_PATHS }})
          for path in "${TARGET_DIRECTORY_PATHS_ARRAY[@]}"; do git add -f "${path}/*"; done
          declare -a TARGET_FILES_PATHS_ARRAY=(${{ inputs.ASSETS_TARGET_FILES }})
          for path in "${TARGET_FILES_PATHS_ARRAY[@]}"; do [[ -f "$path" ]] && git add -f "${path}"; done
          git add -A
          git commit -m "[BOT] Add compiled assets for #${{ github.ref }}" --no-verify || ((echo "NO_CHANGES=yes" >> $GITHUB_ENV) && (echo "No changes to commit"))
          git push




## Add upload artifact