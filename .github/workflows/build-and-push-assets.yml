name: Build and push assets

on:
  workflow_call:
    inputs:
      NODE_VERSION:
        description: Node version with which the assets will be compiled.
        default: 16
        required: false
        type: string
      NPM_REGISTRY_DOMAIN:
        description: Domain of the private npm registry.
        default: "https://npm.pkg.github.com/"
        required: false
        type: string
      PACKAGE_MANAGER:
        description: Package manager. Supported are "yarn" and "npm".
        type: string
        default: "auto"
        required: false
      DEPS_INSTALL:
        description: Install dependencies before compiling?
        type: string
        default: "yes"
        required: false
      COMPILE_SCRIPT_PROD:
        description: Script added to "npm run" or "yarn" to build production assets.
        type: string
        default: "encore prod"
        required: false
      COMPILE_SCRIPT_DEV:
        description: Script added to "npm run" or "yarn" to build development assets.
        type: string
        default: "encore dev"
        required: false
      ASSETS_TARGET_PATHS:
        description: Target path(s) for compiled assets.
        default: "./assets"
        required: false
        type: string
    secrets:
      NPM_REGISTRY_TOKEN:
        description: Authentication for the private npm registry.
        required: false
      GITHUB_USER_EMAIL:
        description: Email address for Git configuration.
        required: true
      GITHUB_USER_NAME:
        description: Username for Git configuration.
        required: true
      GITHUB_USER_SSH_KEY:
        description: Private SSH key associated with the GitHub user passed as `GITHUB_USER_NAME`.
        required: false

jobs:
  compile-assets:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}
      GITHUB_USER_SSH_KEY: ${{ secrets.GITHUB_USER_SSH_KEY }}
      COMPILE_SCRIPT: ${{ inputs.COMPILE_SCRIPT_DEV }} # we'll override if the push is for tag
      TAG_NAME: ''                                     # we'll override if the push is for tag
      TAG_BRANCH_NAME: ''                              # we'll override if the push is for tag
      LOCK_FILE: ''                                    # we'll override after checking files
      PACKAGE_MANAGER: "yarn"                          # we'll override based on env/inputs
      NO_CHANGES: ""                                   # we'll override if no changes to commit
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # when current push is a tag, we check out the tag's SHA, we'll create a new branch later
          ref: ${{ ((github.ref_type == 'tag') && github.sha) || github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.NODE_VERSION }}
          registry-url: ${{ inputs.NPM_REGISTRY_DOMAIN }}

      - name: Set production environment variables
        if: ${{ contains(github.ref, 'refs/tags/') }}
        run: |
          echo "TAG_NAME=$(echo ${GITHUB_REF#refs/*/})" >> $GITHUB_ENV
          echo "COMPILE_SCRIPT=${{ inputs.COMPILE_SCRIPT_PROD }}" >> $GITHUB_ENV

      - name: Set up SSH
        if: ${{ env.GITHUB_USER_SSH_KEY != '' }}
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.GITHUB_USER_SSH_KEY }}

      - name: Setup Git
        run: |
          git config --global user.email "${{ secrets.GITHUB_USER_EMAIL }}" 
          git config --global user.name "${{ secrets.GITHUB_USER_NAME }}"
          git config --global advice.addIgnoredFile false
          git config --global push.autoSetupRemote true
          mkdir -p ${{ inputs.ASSETS_TARGET_PATHS }}

      - name: Git pull on re-run
        if: ${{ (github.run_attempt > 1) && (github.ref_type != 'tag') }}
        run: git pull

      - name: Checkout new branch when running for a tag
        if: ${{ github.ref_type == 'tag' }}
        run: |
          git checkout -b bot/compiled-assets/${{ github.sha }}
          echo "TAG_BRANCH_NAME=bot/compiled-assets/${{ github.sha }}" >> $GITHUB_ENV

      - name: Try determining package manager by lock file
        if: ${{ inputs.PACKAGE_MANAGER == 'auto' }}
        run: |
          [ -f "${GITHUB_WORKSPACE}/package-lock.json" ] && echo "LOCK_FILE=npm" >> $GITHUB_ENV || echo "No package-lock.json found"
          [ -f "${GITHUB_WORKSPACE}/npm-shrinkwrap.json" ] && echo "LOCK_FILE=npm" >> $GITHUB_ENV || echo "No npm-shrinkwrap.json found"
          [ -f "${GITHUB_WORKSPACE}/yarn.lock" ] && echo "LOCK_FILE=yarn" >> $GITHUB_ENV || echo "No yarn.lock found"

      - name: Warning for fallback package manager
        if: ${{ (inputs.PACKAGE_MANAGER == 'auto') && (env.LOCK_FILE == '') }}
        run: echo "::warning::PACKAGE_MANAGER input not defined, and no lock file found, using Yarn as default."

      - name: Determine package manager
        if: ${{ (env.LOCK_FILE == 'npm') || (inputs.PACKAGE_MANAGER == 'npm') }}
        run: echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV

      - name: Cache npm/Yarn dependencies
        uses: actions/cache@v3
        with:
          path: ~/.deps_cache
          key: ${{ runner.os }}-node-${{ inputs.NODE_VERSION }}-${{ env.PACKAGE_MANAGER }}-${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') }}

      - name: Install dependencies
        if: ${{ ! startsWith( 'no', inputs.DEPS_INSTALL ) }}
        run: |
          ${{ ((env.PACKAGE_MANAGER == 'npm') && 'npm config set cache ~/.deps_cache --global') || 'yarn config set cache-folder ~/.deps_cache' }}
          ${{ ((env.PACKAGE_MANAGER == 'npm') && 'npm install') || 'yarn' }}

      - name: Compile assets
        run: ${{ ((env.PACKAGE_MANAGER == 'npm') && 'npm run') || 'yarn' }} ${{ env.COMPILE_SCRIPT }}

      - name: Git add, commit, push
        run: |
          declare -a TARGET_PATHS_ARRAY=(${{ inputs.ASSETS_TARGET_PATHS }})
          for path in "${TARGET_PATHS_ARRAY[@]}"; do git add -f "${path}/*"; done
          git add ./*.json && git add ./*.lock
          git commit -m "[BOT] Add compiled assets for #${{ github.ref }}" --no-verify || ((echo "NO_CHANGES=yes" >> $GITHUB_ENV) && (echo "No changes to commit"))

      - name: Git push
        if: ${{ env.NO_CHANGES != 'yes' }}
        run: git push

      - name: Move tag
        if: ${{ env.TAG_NAME != '' && env.NO_CHANGES != 'yes' }}
        run: |
          git tag -d ${{ env.TAG_NAME }}
          git push origin :refs/tags/${{ env.TAG_NAME }}
          git tag ${{ env.TAG_NAME }}
          git push origin --tags

      - name: Delete tag branch
        if: ${{ always() && (env.TAG_BRANCH_NAME != '' && env.NO_CHANGES != 'yes') }}
        run: |
          git checkout --detach
          git branch -d ${{ env.TAG_BRANCH_NAME }}
          git push origin --delete ${{ env.TAG_BRANCH_NAME }}
