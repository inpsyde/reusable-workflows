name: Build and push assets

on:
  workflow_call:
    inputs:
      NODE_OPTIONS:
        description: Space-separated list of command-line Node options.
        type: string
        default: ''
        required: false
      NODE_VERSION:
        description: Node version with which the static code analysis is to be executed.
        default: 18
        required: false
        type: string
      NPM_REGISTRY_DOMAIN:
        description: Domain of the private npm registry.
        default: https://npm.pkg.github.com/
        required: false
        type: string
      PACKAGE_MANAGER:
        description: Package manager with which the dependencies should be installed (`npm` or `yarn`).
        default: 'yarn'
        required: false
        type: string
      WORKING_DIRECTORY:
        description: Working directory path.
        default: './'
        required: false
        type: string
      COMPILE_SCRIPT_PROD:
        description: Script added to "npm run" or "yarn" to build production assets.
        type: string
        default: 'build'
        required: false
      COMPILE_SCRIPT_DEV:
        description: Script added to "npm run" or "yarn" to build development assets.
        type: string
        default: 'build:dev'
        required: false
      MODE:
        description: Mode for compiling assets (`prod` or `dev`)
        default: ''
        required: false
        type: string
      ASSETS_TARGET_PATHS:
        description: Target path(s) for compiled assets.
        default: './assets/'
        required: false
        type: string
      BUILT_BRANCH_SUFFIX:
        description: Suffix to calculate the target branch for pushing assets on the `branch` event.
        type: string
        default: ''
        required: false
      RELEASE_BRANCH_NAME:
        description: On tag events, target branch where compiled assets are pushed and the tag is moved to.
        type: string
        default: ''
        required: false
      PHP_VERSION:
        description: PHP version with which the PHP tools are to be executed.
        default: '8.0'
        required: false
        type: string
      PHP_TOOLS:
        description: PHP tools supported by shivammathur/setup-php to be installed.
        default: ''
        required: false
        type: string
    secrets:
      NPM_REGISTRY_TOKEN:
        description: Authentication for the private npm registry.
        required: false
      GITHUB_USER_EMAIL:
        description: Email address for the GitHub user configuration.
        required: true
      GITHUB_USER_NAME:
        description: Username for the GitHub user configuration.
        required: true
      GITHUB_USER_SSH_KEY:
        description: Private SSH key associated with the GitHub user passed as `GITHUB_USER_NAME`.
        required: false
      ENV_VARS:
        description: Additional environment variables as a JSON formatted object.
        required: false
jobs:
  checks:
    runs-on: ubuntu-latest
    outputs:
      is_development_branch_last_commit: ${{ github.sha == steps.detect_development_branch_last_commit.outputs.development_branch_last_commit && 'yes' || 'no' }}
      is_moved_tag: ${{ (github.ref_type == 'tag' && contains(steps.detect_tag_annotation.outputs.tag_annotation, env.MOVED_TAG_ANNOTATION_PATTERN)) && 'yes' || 'no' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout development branch
        # it is not possible to get tag annotation from detached state https://github.com/actions/runner/issues/712
        run: |
          git checkout ${{ github.event.repository.default_branch }}

      - name: Find last commit
        id: detect_development_branch_last_commit
        run: |
          echo "development_branch_last_commit=$(git --no-pager log -n 1 --pretty=tformat:'%H')" >> "$GITHUB_OUTPUT"

      - name: Find tag message
        id: detect_tag_annotation
        if: ${{ github.ref_type == 'tag' }}
        run: |
          git fetch --tags --force # Retrieve annotated tags https://github.com/actions/checkout/issues/290
          echo "tag_annotation=$(git --no-pager tag -l --format='%(contents:subject)' ${{ github.ref_name }})" >> "$GITHUB_OUTPUT"

      - name: Prepare moved tag annotation pattern
        run: |
          echo "MOVED_TAG_ANNOTATION_PATTERN=// Released by ${{ github.workflow }}" >> $GITHUB_ENV

  compile-assets:
    needs: checks
    if: ${{ github.ref_type == 'branch' || (github.ref_type == 'tag' && needs.checks.outputs.is_moved_tag == 'no') }}
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: ${{ inputs.NODE_OPTIONS }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}
      NODE_CACHE_MODE: ''
      GITHUB_USER_EMAIL: ${{ secrets.GITHUB_USER_EMAIL }}
      GITHUB_USER_NAME: ${{ secrets.GITHUB_USER_NAME }}
      GITHUB_USER_SSH_KEY: ${{ secrets.GITHUB_USER_SSH_KEY }}
      COMPILE_SCRIPT: ''
      TAG_NAME: ''                                     # we'll override if the push is for tag
      TAG_BRANCH_NAME: ''                              # we'll override if the push is for tag
      LOCK_FILE: ''                                    # we'll override after checking files
      NO_CHANGES: ''                                   # we'll override if no changes to commit
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ env.GITHUB_USER_SSH_KEY }}

      - name: Set up SSH
        if: ${{ env.GITHUB_USER_SSH_KEY != '' }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.GITHUB_USER_SSH_KEY }}

      - name: Set up Git
        run: |
          git config --global user.email "${{ env.GITHUB_USER_EMAIL }}"
          git config --global user.name "${{ env.GITHUB_USER_NAME }}"
          git config --global advice.addIgnoredFile false
          git config --global push.autoSetupRemote true

      - name: Set up custom environment variables
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
        if: ${{ env.ENV_VARS }}
        uses: actions/github-script@v7
        with:
          script: |
            JSON
              .parse(process.env.ENV_VARS)
              .forEach(envVar => core.exportVariable(envVar.name, envVar.value));

      - name: Set compile script
        run: |
          if [ "${{ inputs.MODE }}" == 'dev' ]; then
            echo "COMPILE_SCRIPT=${{ inputs.COMPILE_SCRIPT_DEV }}" >> $GITHUB_ENV
          elif [ "${{ inputs.MODE }}" == 'prod' ]; then
            echo "COMPILE_SCRIPT=${{ inputs.COMPILE_SCRIPT_PROD }}" >> $GITHUB_ENV
          elif [ ${{ contains(github.ref, 'refs/tags/') }} ]; then
            echo "COMPILE_SCRIPT=${{ inputs.COMPILE_SCRIPT_PROD }}" >> $GITHUB_ENV
          else
            echo "COMPILE_SCRIPT=${{ inputs.COMPILE_SCRIPT_DEV }}" >> $GITHUB_ENV
          fi

      - name: Set branch environment variables
        if: ${{ github.ref_type == 'branch' }}
        run: |
          echo "BUILT_BRANCH_NAME=${{ github.ref_name }}${{ inputs.BUILT_BRANCH_SUFFIX }}" >> $GITHUB_ENV

      - name: Set tag environment variables
        if: ${{ github.ref_type == 'tag' }}
        run: |
          echo "TAG_NAME=$(echo ${GITHUB_REF#refs/*/})" >> $GITHUB_ENV
          echo "RELEASE_BRANCH_ENABLED=${{ (needs.checks.outputs.is_development_branch_last_commit == 'yes' && inputs.RELEASE_BRANCH_NAME != '') && 'yes' || 'no' }}" >> $GITHUB_ENV

      - name: Checkout and merge the built branch
        if: ${{ github.ref_type == 'branch' }}
        run: |
          git checkout ${{ env.BUILT_BRANCH_NAME }} || git checkout -b ${{ env.BUILT_BRANCH_NAME }}
          git merge ${{ github.ref_name }}

      - name: Git pull on re-run
        if: ${{ (github.run_attempt > 1) && (github.ref_type != 'tag') }}
        run: git pull

      - name: Checkout and merge the release branch
        if: ${{ github.ref_type == 'tag' && env.RELEASE_BRANCH_ENABLED == 'yes' }}
        run: |
          git checkout ${{ github.event.repository.default_branch }}
          git checkout ${{ inputs.RELEASE_BRANCH_NAME }} || git checkout -b ${{ inputs.RELEASE_BRANCH_NAME }}
          git merge ${{ github.event.repository.default_branch }}

      - name: Checkout temporary tag branch
        if: ${{ github.ref_type == 'tag' && env.RELEASE_BRANCH_ENABLED == 'no'  }}
        run: |
          git checkout -b bot/compiled-assets/${{ github.sha }}
          echo "TAG_BRANCH_NAME=bot/compiled-assets/${{ github.sha }}" >> $GITHUB_ENV

      - name: Prepare directories and files
        run: |
          declare -a TARGET_PATHS_ARRAY=(${{ inputs.ASSETS_TARGET_PATHS }})
          for path in "${TARGET_PATHS_ARRAY[@]}"; do
            if [[ "${path}" == */ ]]; then
              mkdir -p "${path}"
            else
              touch "$path"
            fi
          done


      - name: Set up node cache mode
        run: |
          if [ "${{ inputs.PACKAGE_MANAGER }}" == 'npm' ] && { [ -f "${GITHUB_WORKSPACE}/package-lock.json" ] || [ -f "${GITHUB_WORKSPACE}/npm-shrinkwrap.json" ]; }; then
            echo "NODE_CACHE_MODE=npm" >> $GITHUB_ENV
          elif [ "${{ inputs.PACKAGE_MANAGER }}" == 'yarn' ] && [ -f "${GITHUB_WORKSPACE}/yarn.lock" ]; then
            echo "NODE_CACHE_MODE=yarn" >> $GITHUB_ENV
          else
            echo "No lock files found or unknown package manager"
          fi

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.NODE_VERSION }}
          registry-url: ${{ inputs.NPM_REGISTRY_DOMAIN }}
          cache: ${{ env.NODE_CACHE_MODE }}

      - name: Set up PHP
        if: ${{ inputs.PHP_TOOLS }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.PHP_VERSION }}
          tools: ${{ inputs.PHP_TOOLS }}
          coverage: none

      - name: Install dependencies
        env:
          ARGS: ${{ env.NODE_CACHE_MODE == 'yarn' && '--frozen-lockfile' || env.NODE_CACHE_MODE == 'npm' && 'ci' || 'install' }}
        run: ${{ format('{0} {1}', inputs.PACKAGE_MANAGER, env.ARGS) }}

      - name: Compile assets
        run: ${{ inputs.PACKAGE_MANAGER == 'yarn' && 'yarn' || 'npm run' }} ${{ env.COMPILE_SCRIPT }}

      - name: Git add, commit
        run: |
          declare -a TARGET_PATHS_ARRAY=(${{ inputs.ASSETS_TARGET_PATHS }})
          for path in "${TARGET_PATHS_ARRAY[@]}"; do
            if [[ "${path}" == */ ]]; then
              git add -f "${path}"/*
            else
              git add -f "$path"
            fi
          done
          git add -A
          git commit -m "[BOT] Add compiled assets for #${{ github.ref }}" --no-verify || ((echo "NO_CHANGES=yes" >> $GITHUB_ENV) && (echo "No changes to commit"))

      - name: Git push for branch
        if: ${{ github.ref_type == 'branch' && (env.NO_CHANGES != 'yes' || inputs.BUILT_BRANCH_SUFFIX != '') }}
        run: git push

      - name: Git push for tag
        if: ${{ github.ref_type == 'tag' && (env.NO_CHANGES != 'yes' || env.RELEASE_BRANCH_ENABLED == 'yes') }}
        run: git push

      - name: Move tag
        if: ${{ github.ref_type == 'tag' && (env.NO_CHANGES != 'yes' || env.RELEASE_BRANCH_ENABLED == 'yes') }}
        run: |
          git tag -d ${{ env.TAG_NAME }}
          git push origin :refs/tags/${{ env.TAG_NAME }}
          git tag -a -m "[RELEASE] ${{ github.sha }} // Released by ${{ github.workflow }}" ${{ env.TAG_NAME }}
          git push origin --tags

      - name: Delete temporary tag branch
        if: ${{ always() && (env.TAG_BRANCH_NAME != '' && env.NO_CHANGES != 'yes') }}
        run: |
          git checkout --detach
          git branch -d ${{ env.TAG_BRANCH_NAME }}
          git push origin --delete ${{ env.TAG_BRANCH_NAME }}
