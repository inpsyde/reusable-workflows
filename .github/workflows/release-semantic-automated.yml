name: Release
on:
  workflow_call:
    inputs:
      BRANCHES:
        description: The release branches. Provide it in JSON format.
        default: '["main", "next", {"name": "beta", "prerelease": true}, {"name": "alpha", "prerelease": true} ]'
        required: false
        type: string
      PACKAGE_TYPE:
        description: Choices are "wordpress-plugin", "wordpress-theme", "library", "custom". Needed to understand what release procedure to run or to run a completely custom procedure that lives inside the repository.
        required: true
        type: string
      MAIN_FILENAME:
        description: If there is a main file with the WordPress header, provide its name. Default index.php for WordPress plugin and style.css for WordPress theme
        required: false
        default: ''
        type: string
      FILES_TO_COMMIT:
        description: File names where the version number needs to be updated. Provide it in JSON format.
        required: false
        type: string
      NODE_VERSION:
        description: Node version with which the assets will be compiled.
        default: 18
        required: false
        type: string

jobs:
  release:
    name: Release
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
      MAIN_FILENAME: ${{ inputs.MAIN_FILENAME }}
      FILES_TO_COMMIT: ${{ inputs.FILES_TO_COMMIT }}
      BRANCHES: ${{ inputs.BRANCHES }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.NODE_VERSION }}
      - name: Install dependencies
        run: |
          npm i -g @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/npm \
            @google/semantic-release-replace-plugin \
            semantic-release
      - name: Checkout
        uses: actions/checkout@v3
      - name: Remove Husky hooks
        run: rm -f .husky/pre-commit
      - name: Prepare main filename for a WordPress plugin
        if: ${{ inputs.PACKAGE_TYPE == 'wordpress-plugin' }}
        run: |
          MAIN_FILENAME=${MAIN_FILENAME:-"index.php"}
          echo $MAIN_FILENAME
      - name: Prepare main filename for a WordPress theme
        if: ${{ inputs.PACKAGE_TYPE == 'wordpress-theme' }}
        run: |
            MAIN_FILENAME=${MAIN_FILENAME:-"style.css"}
            echo $MAIN_FILENAME
      - name: Prepare list of files to commit
        if: ${{ inputs.PACKAGE_TYPE == 'wordpress-plugin' || inputs.PACKAGE_TYPE == 'wordpress-theme' }}
        run: |
          FILES_TO_COMMIT=${FILES_TO_COMMIT:-"[\"CHANGELOG.md\", \"package-lock.json\", \"package.json\", \"composer.json\", \"$MAIN_FILENAME\"]"}
          echo $FILES_TO_COMMIT
      - name: Configure semantic release bot for a WordPress plugin or theme
        if: ${{ inputs.PACKAGE_TYPE == 'wordpress-plugin' || inputs.PACKAGE_TYPE == 'wordpress-theme'}}
        run: |
          echo "module.exports = {
            \"branches\": $BRANCHES,
            \"plugins\": [
              \"@semantic-release/commit-analyzer\",
              \"@semantic-release/release-notes-generator\",
              \"@semantic-release/changelog\",
              [\"@semantic-release/npm\", {
                \"tarballDir\": \"release\",
                \"npmPublish\": false
              }],
              [\"@google/semantic-release-replace-plugin\", {
                \"replacements\": [
                  {
                    \"files\": [\"$MAIN_FILENAME\"],
                    \"from\": \"Version:\(.*\)\",
                    \"to\": \"Version:     \${nextRelease.version}\",
                    \"results\": [
                      {
                        \"file\": \"$MAIN_FILENAME\",
                        \"hasChanged\": true,
                        \"numMatches\": 1,
                        \"numReplacements\": 1
                      }
                    ],
                    \"countMatches\": true
                  }
                ]
              }],
              \"@semantic-release/github\",
              [\"@semantic-release/git\", {
                \"assets\": $FILES_TO_COMMIT,
                \"message\": \"chore(release): \${nextRelease.version} [skip ci]\n\n\${nextRelease.notes}\"
              }]
            ],
            \"preset\": \"angular\",
            \"tagFormat\": \"\${version}\"\
          }" > release.config.js
      - name: Configure semantic release bot for a library
        if: ${{ inputs.PACKAGE_TYPE == 'library' }}
        run: |
          echo "module.exports = {
            \"branches\": $BRANCHES,
            \"plugins\": [
              \"@semantic-release/commit-analyzer\",
              \"@semantic-release/release-notes-generator\",
              \"@semantic-release/changelog\",
              [\"@semantic-release/npm\", {
                \"tarballDir\": \"release\",
                \"npmPublish\": false
              }],
              \"@semantic-release/github\",
              [\"@semantic-release/git\", {
                \"assets\": $FILES_TO_COMMIT,
                \"message\": \"chore(release): \${nextRelease.version} [skip ci]\n\n\${nextRelease.notes}\"
              }]
            ],
            \"preset\": \"angular\",
            \"tagFormat\": \"\${version}\"
          }" > release.config.js
      - name: Configure semantic release bot for a custom package
        if: ${{ inputs.PACKAGE_TYPE == 'custom' }}
        run: echo "Using repository release configurations"
      - name: DEBUG POINT
        run: |
          cat release.config.js
      - name: Check the presence of the configuration file
        run: |
          CHECK_CONFIGURATION_EXISTS=true
          if [ ! -f "release.config.js" ]; then 
            echo "Configuration file release.config.js does not exist, aborting!" 
            CHECK_CONFIGURATION_EXISTS=false
          else
            echo "Configuration file release.config.js exists, proceeding with the release!" 
          fi
          echo "CHECK_CONFIGURATION_EXISTS=$CHECK_CONFIGURATION_EXISTS" >> $GITHUB_ENV
          echo $CHECK_CONFIGURATION_EXISTS
      - name: Release
        if: ${{ env.CHECK_CONFIGURATION_EXISTS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
